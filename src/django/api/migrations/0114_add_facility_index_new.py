# Generated by Django 3.2.4 on 2023-07-13 13:49

import django.contrib.gis.db.models.fields
import django.contrib.postgres.fields
import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('api', '0113_change_tr_country_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='FacilityIndex',
            fields=[
                ('id', models.CharField(db_index=True, editable=False, help_text='The OS ID of a facility.', max_length=32, primary_key=True, serialize=False)),
                ('name', models.CharField(db_index=True, help_text='The name of the facility.', max_length=200)),
                ('address', models.CharField(db_index=True, help_text='The full street address of the facility.', max_length=200)),
                ('country_code', models.CharField(choices=[('AF', 'Afghanistan'), ('AX', 'Åland Islands'), ('AL', 'Albania'), ('DZ', 'Algeria'), ('AS', 'American Samoa'), ('AD', 'Andorra'), ('AO', 'Angola'), ('AI', 'Anguilla'), ('AQ', 'Antarctica'), ('AG', 'Antigua and Barbuda'), ('AR', 'Argentina'), ('AM', 'Armenia'), ('AW', 'Aruba'), ('AU', 'Australia'), ('AT', 'Austria'), ('AZ', 'Azerbaijan'), ('BS', 'Bahamas'), ('BH', 'Bahrain'), ('BD', 'Bangladesh'), ('BB', 'Barbados'), ('BY', 'Belarus'), ('BE', 'Belgium'), ('BZ', 'Belize'), ('BJ', 'Benin'), ('BM', 'Bermuda'), ('BT', 'Bhutan'), ('BO', 'Bolivia, Plurinational State of'), ('BQ', 'Bonaire, Sint Eustatius and Saba'), ('BA', 'Bosnia and Herzegovina'), ('BW', 'Botswana'), ('BV', 'Bouvet Island'), ('BR', 'Brazil'), ('IO', 'British Indian Ocean Territory'), ('BN', 'Brunei Darussalam'), ('BG', 'Bulgaria'), ('BF', 'Burkina Faso'), ('BI', 'Burundi'), ('KH', 'Cambodia'), ('CM', 'Cameroon'), ('CA', 'Canada'), ('CV', 'Cape Verde'), ('KY', 'Cayman Islands'), ('CF', 'Central African Republic'), ('TD', 'Chad'), ('CL', 'Chile'), ('CN', 'China'), ('CX', 'Christmas Island'), ('CC', 'Cocos (Keeling) Islands'), ('CO', 'Colombia'), ('KM', 'Comoros'), ('CG', 'Congo'), ('CD', 'Congo, the Democratic Republic of the'), ('CK', 'Cook Islands'), ('CR', 'Costa Rica'), ('CI', "Côte d'Ivoire"), ('HR', 'Croatia'), ('CU', 'Cuba'), ('CW', 'Curacao'), ('CY', 'Cyprus'), ('CZ', 'Czech Republic'), ('DK', 'Denmark'), ('DJ', 'Djibouti'), ('DM', 'Dominica'), ('DO', 'Dominican Republic'), ('EC', 'Ecuador'), ('EG', 'Egypt'), ('SV', 'El Salvador'), ('GQ', 'Equatorial Guinea'), ('ER', 'Eritrea'), ('EE', 'Estonia'), ('ET', 'Ethiopia'), ('FK', 'Falkland Islands (Malvinas)'), ('FO', 'Faroe Islands'), ('FJ', 'Fiji'), ('FI', 'Finland'), ('FR', 'France'), ('GF', 'French Guiana'), ('PF', 'French Polynesia'), ('TF', 'French Southern Territories'), ('GA', 'Gabon'), ('GM', 'Gambia'), ('GE', 'Georgia'), ('DE', 'Germany'), ('GH', 'Ghana'), ('GI', 'Gibraltar'), ('GR', 'Greece'), ('GL', 'Greenland'), ('GD', 'Grenada'), ('GP', 'Guadeloupe'), ('GU', 'Guam'), ('GT', 'Guatemala'), ('GG', 'Guernsey'), ('GN', 'Guinea'), ('GW', 'Guinea-Bissau'), ('GY', 'Guyana'), ('HT', 'Haiti'), ('HM', 'Heard Island and McDonald Islands'), ('VA', 'Holy See (Vatican City State)'), ('HN', 'Honduras'), ('HK', 'Hong Kong'), ('HU', 'Hungary'), ('IS', 'Iceland'), ('IN', 'India'), ('ID', 'Indonesia'), ('IR', 'Iran, Islamic Republic of'), ('IQ', 'Iraq'), ('IE', 'Ireland'), ('IM', 'Isle of Man'), ('IL', 'Israel'), ('IT', 'Italy'), ('JM', 'Jamaica'), ('JP', 'Japan'), ('JE', 'Jersey'), ('JO', 'Jordan'), ('KZ', 'Kazakhstan'), ('KE', 'Kenya'), ('KI', 'Kiribati'), ('KP', "Korea, Democratic People's Republic of"), ('KR', 'Korea, Republic of'), ('XK', 'Kosovo'), ('KW', 'Kuwait'), ('KG', 'Kyrgyzstan'), ('LA', "Lao People's Democratic Republic"), ('LV', 'Latvia'), ('LB', 'Lebanon'), ('LS', 'Lesotho'), ('LR', 'Liberia'), ('LY', 'Libya'), ('LI', 'Liechtenstein'), ('LT', 'Lithuania'), ('LU', 'Luxembourg'), ('MO', 'Macao'), ('MG', 'Madagascar'), ('MW', 'Malawi'), ('MY', 'Malaysia'), ('MV', 'Maldives'), ('ML', 'Mali'), ('MT', 'Malta'), ('MH', 'Marshall Islands'), ('MQ', 'Martinique'), ('MR', 'Mauritania'), ('MU', 'Mauritius'), ('YT', 'Mayotte'), ('MX', 'Mexico'), ('FM', 'Micronesia, Federated States of'), ('MD', 'Moldova, Republic of'), ('MC', 'Monaco'), ('MN', 'Mongolia'), ('ME', 'Montenegro'), ('MS', 'Montserrat'), ('MA', 'Morocco'), ('MZ', 'Mozambique'), ('MM', 'Myanmar'), ('NA', 'Namibia'), ('NR', 'Nauru'), ('NP', 'Nepal'), ('NL', 'Netherlands'), ('NC', 'New Caledonia'), ('NZ', 'New Zealand'), ('NI', 'Nicaragua'), ('NE', 'Niger'), ('NG', 'Nigeria'), ('NU', 'Niue'), ('NF', 'Norfolk Island'), ('MK', 'North Macedonia'), ('MP', 'Northern Mariana Islands'), ('NO', 'Norway'), ('OM', 'Oman'), ('PK', 'Pakistan'), ('PW', 'Palau'), ('PS', 'Palestine, State of'), ('PA', 'Panama'), ('PG', 'Papua New Guinea'), ('PY', 'Paraguay'), ('PE', 'Peru'), ('PH', 'Philippines'), ('PN', 'Pitcairn'), ('PL', 'Poland'), ('PT', 'Portugal'), ('PR', 'Puerto Rico'), ('QA', 'Qatar'), ('RE', 'Reunion'), ('RO', 'Romania'), ('RU', 'Russian Federation'), ('RW', 'Rwanda'), ('BL', 'Saint Barthelemy'), ('SH', 'Saint Helena, Ascension and Tristan da Cunha'), ('KN', 'Saint Kitts and Nevis'), ('LC', 'Saint Lucia'), ('MF', 'Saint Martin (French part)'), ('PM', 'Saint Pierre and Miquelon'), ('VC', 'Saint Vincent and the Grenadines'), ('WS', 'Samoa'), ('SM', 'San Marino'), ('ST', 'Sao Tome and Principe,Sao Tome And Principe'), ('SA', 'Saudi Arabia'), ('SN', 'Senegal'), ('RS', 'Serbia'), ('SC', 'Seychelles'), ('SL', 'Sierra Leone'), ('SG', 'Singapore'), ('SX', 'Sint Maarten (Dutch part)'), ('SK', 'Slovakia'), ('SI', 'Slovenia'), ('SB', 'Solomon Islands'), ('SO', 'Somalia'), ('ZA', 'South Africa'), ('GS', 'South Georgia and the South Sandwich Islands'), ('SS', 'South Sudan'), ('ES', 'Spain'), ('LK', 'Sri Lanka'), ('SD', 'Sudan'), ('SR', 'Suriname'), ('SJ', 'Svalbard and Jan Mayen'), ('SZ', 'Swaziland'), ('SE', 'Sweden'), ('CH', 'Switzerland'), ('SY', 'Syrian Arab Republic'), ('TW', 'Taiwan'), ('TJ', 'Tajikistan'), ('TZ', 'Tanzania, United Republic of'), ('TH', 'Thailand'), ('TL', 'Timor-Leste'), ('TG', 'Togo'), ('TK', 'Tokelau'), ('TO', 'Tonga'), ('TT', 'Trinidad and Tobago'), ('TN', 'Tunisia'), ('TR', 'Türkiye'), ('TM', 'Turkmenistan'), ('TC', 'Turks and Caicos Islands'), ('TV', 'Tuvalu'), ('UG', 'Uganda'), ('UA', 'Ukraine'), ('AE', 'United Arab Emirates'), ('GB', 'United Kingdom'), ('US', 'United States'), ('UM', 'United States Minor Outlying Islands'), ('UY', 'Uruguay'), ('UZ', 'Uzbekistan'), ('VU', 'Vanuatu'), ('VE', 'Venezuela, Bolivarian Republic of'), ('VN', 'Vietnam'), ('VG', 'Virgin Islands, British'), ('VI', 'Virgin Islands, U.S.'), ('WF', 'Wallis and Futuna'), ('EH', 'Western Sahara'), ('YE', 'Yemen'), ('ZM', 'Zambia'), ('ZW', 'Zimbabwe')], db_index=True, help_text='The ISO 3166-1 alpha-2 country code of the facility.', max_length=2)),
                ('location', django.contrib.gis.db.models.fields.PointField(help_text='The lat/lng point location of the facility', srid=4326)),
                ('contributors_count', models.IntegerField(db_index=True, help_text='The count of the public contributors.')),
                ('contributors_id', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(help_text='The contributor id who submitted the facility data.', null=True), size=None)),
                ('approved_claim_ids', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(db_index=True, editable=False, help_text='The related approved claim facilities.', null=True), size=None)),
                ('ppe_product_types', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(help_text='A type of personal protective equipment produced at the facility', max_length=100, verbose_name='ppe product type'), blank=True, db_index=True, help_text='The types of personal protective equipment produced at the facility', null=True, size=None, verbose_name='ppe product types')),
                ('ppe_contact_email', models.EmailField(blank=True, db_index=True, help_text='The contact email for PPE-related discussion', max_length=254, null=True, verbose_name='ppe contact email')),
                ('ppe_contact_phone', models.CharField(blank=True, db_index=True, help_text='The contact phone number for PPE-related discussion', max_length=100, null=True, verbose_name='ppe contact phone')),
                ('ppe_website', models.URLField(blank=True, db_index=True, help_text='The website for PPE information', null=True, verbose_name='ppe website')),
                ('is_closed', models.BooleanField(db_index=True, help_text='Whether this facility is closed.', null=True)),
                ('new_os_id', models.CharField(blank=True, help_text='The new OS ID where this facility can be found if it has been moved.', max_length=32, null=True)),
                ('has_inexact_coordinates', models.BooleanField(default=False, help_text='Whether this facility has manually adjusted coordinates known to be inexact.')),
                ('contrib_types', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(choices=[('Academic / Researcher / Journalist / Student', 'Academic / Researcher / Journalist / Student'), ('Auditor / Certification Scheme / Service Provider', 'Auditor / Certification Scheme / Service Provider'), ('Brand / Retailer', 'Brand / Retailer'), ('Civil Society Organization', 'Civil Society Organization'), ('Facility / Factory / Manufacturing Group / Supplier / Vendor', 'Facility / Factory / Manufacturing Group / Supplier / Vendor'), ('Multi-Stakeholder Initiative', 'Multi-Stakeholder Initiative'), ('Union', 'Union'), ('Other', 'Other')], db_index=True, help_text='The categories to which the contributors belong.', max_length=2000, null=True), size=None)),
                ('contributors', django.contrib.postgres.fields.ArrayField(base_field=models.JSONField(help_text='The contributor who submitted the facility data.'), size=None)),
                ('ppe', models.TextField(db_index=True, help_text='A type of personal protective equipment produced at the facility', null=True, verbose_name='ppe product type')),
                ('sector', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(db_index=True, help_text='The sector(s) for goods made at the facility', max_length=50), default=list, size=None)),
                ('lists', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(db_index=True, editable=False, help_text='The related list if the type of the source is LIST.', null=True), size=None)),
                ('custom_text', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(db_index=True, help_text='A collection of custom values to search for the facility'), default=list, size=None)),
                ('number_of_workers', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(db_index=True, help_text='ExtendedField for number of workers.'), default=list, size=None)),
                ('facility_type', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(db_index=True, help_text='ExtendedField for facility type.', max_length=2000), default=list, size=None)),
                ('processing_type', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(db_index=True, help_text='ExtendedField for processing type.', max_length=2000), default=list, size=None)),
                ('product_type', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(db_index=True, help_text='ExtendedField for product type.', max_length=2000), default=list, size=None)),
                ('parent_company_name', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(db_index=True, help_text='ExtendedField for parent company.', max_length=2000), default=list, size=None)),
                ('native_language_name', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(db_index=True, help_text='ExtendedField for native language name.', max_length=2000), default=list, size=None)),
                ('parent_company_id', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(db_index=True, help_text='ExtendedField for parent_company_id.'), default=list, size=None)),
                ('facility_names', django.contrib.postgres.fields.ArrayField(base_field=models.JSONField(help_text='List of facility names for given facility.'), size=None)),
                ('facility_list_items', django.contrib.postgres.fields.ArrayField(base_field=models.JSONField(help_text='List of facility list items assigneg to this facility.'), default=list, size=None)),
                ('facility_locations', django.contrib.postgres.fields.ArrayField(base_field=models.JSONField(help_text='The corrected location info of the facility.'), default=list, size=None)),
                ('approved_claim', models.JSONField(blank=True, help_text='List of facility list items assigneg to this facility.', null=True)),
                ('facility_addresses', django.contrib.postgres.fields.ArrayField(base_field=models.JSONField(help_text='List of facility addresses for given facility.'), size=None)),
                ('claim_info', models.JSONField(help_text='Claim information for given facility.', null=True)),
                ('custom_field_info', django.contrib.postgres.fields.ArrayField(base_field=models.JSONField(help_text='Embed Field information for given facility.'), default=list, size=None)),
                ('extended_fields', django.contrib.postgres.fields.ArrayField(base_field=models.JSONField(help_text='The extended fields for given facility.'), size=None)),
                ('created_from_info', models.JSONField(blank=True, help_text='The original uploaded list item info from which this facility was created.', null=True)),
                ('activity_reports_info', django.contrib.postgres.fields.ArrayField(base_field=models.JSONField(help_text='Activity Reports information for given facility.'), default=list, size=None)),
                ('item_sectors', django.contrib.postgres.fields.ArrayField(base_field=models.JSONField(help_text="Items' sectors information for given facility."), default=list, size=None)),
                ('claim_sectors', django.contrib.postgres.fields.ArrayField(base_field=models.JSONField(help_text="Claims' sectors information for given facility."), default=list, size=None)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
            ],
        ),
        migrations.AlterField(
            model_name='facility',
            name='id',
            field=models.CharField(db_index=True, editable=False, help_text='The OS ID of a facility.', max_length=32, primary_key=True, serialize=False),
        ),
        migrations.AlterField(
            model_name='user',
            name='burst_rate',
            field=models.CharField(default='100/minute', help_text="Maximum allowed burst requests for this user. Burst rate should be shorter periods, 'second' or 'minute'. This applies to most API requests, but excludes Facility uploads.", max_length=20, validators=[django.core.validators.RegexValidator('\\d+/(second|minute|hour|day)', 'You must enter value of the format N/(second|minute|hour|day)')]),
        ),
        migrations.AlterField(
            model_name='user',
            name='data_upload_rate',
            field=models.CharField(default='30/minute', help_text='Maximum allowed facility upload rate for this user. This applies to only API Facility uploads.', max_length=20, validators=[django.core.validators.RegexValidator('\\d+/(second|minute|hour|day)', 'You must enter value of the format N/(second|minute|hour|day)')]),
        ),
        migrations.AlterField(
            model_name='user',
            name='sustained_rate',
            field=models.CharField(default='10000/day', help_text="Maximum allowed sustained requests for this user. Sustained rate should be longer periods, 'hour' or 'day'. This applies to most API requests, but excludes Facility uploads.", max_length=20, validators=[django.core.validators.RegexValidator('\\d+/(second|minute|hour|day)', 'You must enter value of the format N/(second|minute|hour|day)')]),
        ),
    ]
