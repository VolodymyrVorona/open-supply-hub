# Generated by Django 3.2.4 on 2023-09-19 09:46

from django.conf import settings
import django.contrib.gis.db.models.fields
import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion
import simple_history.models


class Migration(migrations.Migration):

    dependencies = [
        ('api', '0125_fill_facility_list_item_fields'),
    ]

    operations = [
        migrations.CreateModel(
            name='FacilityListItemTemp',
            fields=[
                ('id', models.AutoField(auto_created=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('facility_id', models.CharField(blank=True, max_length=200, help_text='The facility created from this list item or the previously existing facility to which this list item was matched.', null=True)),
                ('source', models.ForeignKey(help_text='The source from which this item was created.', on_delete=django.db.models.deletion.PROTECT, to='api.source')),
                ('row_index', models.IntegerField(editable=False, help_text='Index of this line in the CSV file.')),
                ('raw_data', models.TextField(help_text='The full, unparsed CSV line as it appeared in the file.')),
                ('status', models.CharField(choices=[('UPLOADED', 'UPLOADED'), ('PARSED', 'PARSED'), ('DUPLICATE', 'DUPLICATE'), ('GEOCODED', 'GEOCODED'), ('GEOCODED_NO_RESULTS', 'GEOCODED_NO_RESULTS'), ('MATCHED', 'MATCHED'), ('POTENTIAL_MATCH', 'POTENTIAL_MATCH'), ('CONFIRMED_MATCH', 'CONFIRMED_MATCH'), ('ERROR', 'ERROR'), ('ERROR_PARSING', 'ERROR_PARSING'), ('ERROR_GEOCODING', 'ERROR_GEOCODING'), ('ERROR_MATCHING', 'ERROR_MATCHING'), ('DELETED', 'DELETED'), ('ITEM_REMOVED', 'ITEM_REMOVED')], default='UPLOADED', help_text='The current workflow progress of the line item.', max_length=200)),
                ('processing_started_at', models.DateTimeField(help_text='When background processing of this item started. Items awaiting processing will have a null value.', null=True)),
                ('processing_completed_at', models.DateTimeField(help_text='When background processing of this item finished. Items awaiting or in process will have a null value.', null=True)),
                ('processing_results', models.JSONField(default=list, help_text='Diagnostic details logged by background processing including details returned from the geocoder.')),
                ('name', models.CharField(help_text='The name of the facility taken from the raw data.', max_length=200)),
                ('address', models.CharField(help_text='The address of the facility taken from the raw data.', max_length=200)),
                ('country_code', models.CharField(choices=[('AF', 'Afghanistan'), ('AX', 'Åland Islands'), ('AL', 'Albania'), ('DZ', 'Algeria'), ('AS', 'American Samoa'), ('AD', 'Andorra'), ('AO', 'Angola'), ('AI', 'Anguilla'), ('AQ', 'Antarctica'), ('AG', 'Antigua and Barbuda'), ('AR', 'Argentina'), ('AM', 'Armenia'), ('AW', 'Aruba'), ('AU', 'Australia'), ('AT', 'Austria'), ('AZ', 'Azerbaijan'), ('BS', 'Bahamas'), ('BH', 'Bahrain'), ('BD', 'Bangladesh'), ('BB', 'Barbados'), ('BY', 'Belarus'), ('BE', 'Belgium'), ('BZ', 'Belize'), ('BJ', 'Benin'), ('BM', 'Bermuda'), ('BT', 'Bhutan'), ('BO', 'Bolivia, Plurinational State of'), ('BQ', 'Bonaire, Sint Eustatius and Saba'), ('BA', 'Bosnia and Herzegovina'), ('BW', 'Botswana'), ('BV', 'Bouvet Island'), ('BR', 'Brazil'), ('IO', 'British Indian Ocean Territory'), ('BN', 'Brunei Darussalam'), ('BG', 'Bulgaria'), ('BF', 'Burkina Faso'), ('BI', 'Burundi'), ('KH', 'Cambodia'), ('CM', 'Cameroon'), ('CA', 'Canada'), ('CV', 'Cape Verde'), ('KY', 'Cayman Islands'), ('CF', 'Central African Republic'), ('TD', 'Chad'), ('CL', 'Chile'), ('CN', 'China'), ('CX', 'Christmas Island'), ('CC', 'Cocos (Keeling) Islands'), ('CO', 'Colombia'), ('KM', 'Comoros'), ('CG', 'Congo'), ('CD', 'Congo, the Democratic Republic of the'), ('CK', 'Cook Islands'), ('CR', 'Costa Rica'), ('CI', "Côte d'Ivoire"), ('HR', 'Croatia'), ('CU', 'Cuba'), ('CW', 'Curacao'), ('CY', 'Cyprus'), ('CZ', 'Czech Republic'), ('DK', 'Denmark'), ('DJ', 'Djibouti'), ('DM', 'Dominica'), ('DO', 'Dominican Republic'), ('EC', 'Ecuador'), ('EG', 'Egypt'), ('SV', 'El Salvador'), ('GQ', 'Equatorial Guinea'), ('ER', 'Eritrea'), ('EE', 'Estonia'), ('ET', 'Ethiopia'), ('FK', 'Falkland Islands (Malvinas)'), ('FO', 'Faroe Islands'), ('FJ', 'Fiji'), ('FI', 'Finland'), ('FR', 'France'), ('GF', 'French Guiana'), ('PF', 'French Polynesia'), ('TF', 'French Southern Territories'), ('GA', 'Gabon'), ('GM', 'Gambia'), ('GE', 'Georgia'), ('DE', 'Germany'), ('GH', 'Ghana'), ('GI', 'Gibraltar'), ('GR', 'Greece'), ('GL', 'Greenland'), ('GD', 'Grenada'), ('GP', 'Guadeloupe'), ('GU', 'Guam'), ('GT', 'Guatemala'), ('GG', 'Guernsey'), ('GN', 'Guinea'), ('GW', 'Guinea-Bissau'), ('GY', 'Guyana'), ('HT', 'Haiti'), ('HM', 'Heard Island and McDonald Islands'), ('VA', 'Holy See (Vatican City State)'), ('HN', 'Honduras'), ('HK', 'Hong Kong'), ('HU', 'Hungary'), ('IS', 'Iceland'), ('IN', 'India'), ('ID', 'Indonesia'), ('IR', 'Iran, Islamic Republic of'), ('IQ', 'Iraq'), ('IE', 'Ireland'), ('IM', 'Isle of Man'), ('IL', 'Israel'), ('IT', 'Italy'), ('JM', 'Jamaica'), ('JP', 'Japan'), ('JE', 'Jersey'), ('JO', 'Jordan'), ('KZ', 'Kazakhstan'), ('KE', 'Kenya'), ('KI', 'Kiribati'), ('KP', "Korea, Democratic People's Republic of"), ('KR', 'Korea, Republic of'), ('XK', 'Kosovo'), ('KW', 'Kuwait'), ('KG', 'Kyrgyzstan'), ('LA', "Lao People's Democratic Republic"), ('LV', 'Latvia'), ('LB', 'Lebanon'), ('LS', 'Lesotho'), ('LR', 'Liberia'), ('LY', 'Libya'), ('LI', 'Liechtenstein'), ('LT', 'Lithuania'), ('LU', 'Luxembourg'), ('MO', 'Macao'), ('MG', 'Madagascar'), ('MW', 'Malawi'), ('MY', 'Malaysia'), ('MV', 'Maldives'), ('ML', 'Mali'), ('MT', 'Malta'), ('MH', 'Marshall Islands'), ('MQ', 'Martinique'), ('MR', 'Mauritania'), ('MU', 'Mauritius'), ('YT', 'Mayotte'), ('MX', 'Mexico'), ('FM', 'Micronesia, Federated States of'), ('MD', 'Moldova, Republic of'), ('MC', 'Monaco'), ('MN', 'Mongolia'), ('ME', 'Montenegro'), ('MS', 'Montserrat'), ('MA', 'Morocco'), ('MZ', 'Mozambique'), ('MM', 'Myanmar'), ('NA', 'Namibia'), ('NR', 'Nauru'), ('NP', 'Nepal'), ('NL', 'Netherlands'), ('NC', 'New Caledonia'), ('NZ', 'New Zealand'), ('NI', 'Nicaragua'), ('NE', 'Niger'), ('NG', 'Nigeria'), ('NU', 'Niue'), ('NF', 'Norfolk Island'), ('MK', 'North Macedonia'), ('MP', 'Northern Mariana Islands'), ('NO', 'Norway'), ('OM', 'Oman'), ('PK', 'Pakistan'), ('PW', 'Palau'), ('PS', 'Palestine, State of'), ('PA', 'Panama'), ('PG', 'Papua New Guinea'), ('PY', 'Paraguay'), ('PE', 'Peru'), ('PH', 'Philippines'), ('PN', 'Pitcairn'), ('PL', 'Poland'), ('PT', 'Portugal'), ('PR', 'Puerto Rico'), ('QA', 'Qatar'), ('RE', 'Reunion'), ('RO', 'Romania'), ('RU', 'Russian Federation'), ('RW', 'Rwanda'), ('BL', 'Saint Barthelemy'), ('SH', 'Saint Helena, Ascension and Tristan da Cunha'), ('KN', 'Saint Kitts and Nevis'), ('LC', 'Saint Lucia'), ('MF', 'Saint Martin (French part)'), ('PM', 'Saint Pierre and Miquelon'), ('VC', 'Saint Vincent and the Grenadines'), ('WS', 'Samoa'), ('SM', 'San Marino'), ('ST', 'Sao Tome and Principe,Sao Tome And Principe'), ('SA', 'Saudi Arabia'), ('SN', 'Senegal'), ('RS', 'Serbia'), ('SC', 'Seychelles'), ('SL', 'Sierra Leone'), ('SG', 'Singapore'), ('SX', 'Sint Maarten (Dutch part)'), ('SK', 'Slovakia'), ('SI', 'Slovenia'), ('SB', 'Solomon Islands'), ('SO', 'Somalia'), ('ZA', 'South Africa'), ('GS', 'South Georgia and the South Sandwich Islands'), ('SS', 'South Sudan'), ('ES', 'Spain'), ('LK', 'Sri Lanka'), ('SD', 'Sudan'), ('SR', 'Suriname'), ('SJ', 'Svalbard and Jan Mayen'), ('SZ', 'Swaziland'), ('SE', 'Sweden'), ('CH', 'Switzerland'), ('SY', 'Syrian Arab Republic'), ('TW', 'Taiwan'), ('TJ', 'Tajikistan'), ('TZ', 'Tanzania, United Republic of'), ('TH', 'Thailand'), ('TL', 'Timor-Leste'), ('TG', 'Togo'), ('TK', 'Tokelau'), ('TO', 'Tonga'), ('TT', 'Trinidad and Tobago'), ('TN', 'Tunisia'), ('TR', 'Türkiye'), ('TM', 'Turkmenistan'), ('TC', 'Turks and Caicos Islands'), ('TV', 'Tuvalu'), ('UG', 'Uganda'), ('UA', 'Ukraine'), ('AE', 'United Arab Emirates'), ('GB', 'United Kingdom'), ('US', 'United States'), ('UM', 'United States Minor Outlying Islands'), ('UY', 'Uruguay'), ('UZ', 'Uzbekistan'), ('VU', 'Vanuatu'), ('VE', 'Venezuela, Bolivarian Republic of'), ('VN', 'Vietnam'), ('VG', 'Virgin Islands, British'), ('VI', 'Virgin Islands, U.S.'), ('WF', 'Wallis and Futuna'), ('EH', 'Western Sahara'), ('YE', 'Yemen'), ('ZM', 'Zambia'), ('ZW', 'Zimbabwe')], help_text='The ISO 3166-1 alpha-2 country code of the facility taken directly from the raw data or looked up based on a full country name provided in the raw data.', max_length=2)),
                ('sector', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=50), help_text='The sector(s) for goods made at the facility', size=None)),
                ('geocoded_point', django.contrib.gis.db.models.fields.PointField(help_text='The geocoded location the facility address field taken from the raw data.', null=True, srid=4326)),
                ('geocoded_address', models.CharField(blank=True, help_text='The geocoded address of the facility.', max_length=1000, null=True)),
                ('clean_name', models.CharField(default='', help_text='The cleaned name of the facility.', max_length=2000)),
                ('clean_address', models.CharField(default='', help_text='The cleaned address of the facility.', max_length=2000)),
                ('ppe_product_types', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(help_text='A type of personal protective equipment produced at the facility', max_length=100, verbose_name='ppe product type'), blank=True, help_text='The types of personal protective equipment produced at the facility', null=True, size=None, verbose_name='ppe product types')),
                ('ppe_contact_email', models.EmailField(blank=True, help_text='The contact email for PPE-related discussion', max_length=254, null=True, verbose_name='ppe contact email')),
                ('ppe_contact_phone', models.CharField(blank=True, help_text='The contact phone number for PPE-related discussion', max_length=100, null=True, verbose_name='ppe contact phone')),
                ('ppe_website', models.URLField(blank=True, help_text='The website for PPE information', null=True, verbose_name='ppe website')),
                ('version', models.CharField(blank=True, help_text='The version of Dedupe Hub instance that used.', max_length=200, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='HistoricalFacilityMatchTemp',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('facility_id', models.CharField(blank=True, max_length=200, help_text='The existing facility that may match an uploaded list item.', null=True)),
                ('facility_list_item', models.ForeignKey(blank=True, db_constraint=False, help_text='The list item being matched to an existing facility.', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='api.facilitylistitemtemp')),
                ('results', models.JSONField(help_text='Diagnostic details from the matching process.')),
                ('confidence', models.DecimalField(decimal_places=2, default=0.0, help_text='A numeric representation of how confident the app is that the list item matches the existing facility. Larger numbers are better.', max_digits=5)),
                ('status', models.CharField(choices=[('PENDING', 'PENDING'), ('AUTOMATIC', 'AUTOMATIC'), ('CONFIRMED', 'CONFIRMED'), ('REJECTED', 'REJECTED'), ('MERGED', 'MERGED')], default='PENDING', help_text='The current status of the match. AUTOMATIC if the application made a match with high confidence. PENDING if confirmation from the contributor admin is required. CONFIRMED if the admin approves the match. REJECTED if the admin rejects the match. Only one row for a given and facility list item pair should have either AUTOMATIC or CONFIRMED status', max_length=9)),
                ('is_active', models.BooleanField(default=True, help_text='A facility match is_active if its associated list item not been removed; when a list item is removed, this field will be set to False.')),
                ('version', models.CharField(blank=True, help_text='The version of Dedupe Hub instance that used.', max_length=200, null=True)),   
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('updated_at', models.DateTimeField(blank=True, editable=False)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),

            ],
            options={
                'verbose_name': 'historical facility match temp',
                'verbose_name_plural': 'historical facility matches temp',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='FacilityMatchTemp',
            fields=[
                ('id', models.AutoField(auto_created=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('facility_id', models.CharField(blank=True, max_length=200, help_text='The existing facility that may match an uploaded list item.', null=True)),
                ('facility_list_item', models.ForeignKey(help_text='The list item being matched to an existing facility.', on_delete=django.db.models.deletion.PROTECT, to='api.facilitylistitemtemp')),
                ('results', models.JSONField(help_text='Diagnostic details from the matching process.')),
                ('confidence', models.DecimalField(decimal_places=2, default=0.0, help_text='A numeric representation of how confident the app is that the list item matches the existing facility. Larger numbers are better.', max_digits=5)),
                ('status', models.CharField(choices=[('PENDING', 'PENDING'), ('AUTOMATIC', 'AUTOMATIC'), ('CONFIRMED', 'CONFIRMED'), ('REJECTED', 'REJECTED'), ('MERGED', 'MERGED')], default='PENDING', help_text='The current status of the match. AUTOMATIC if the application made a match with high confidence. PENDING if confirmation from the contributor admin is required. CONFIRMED if the admin approves the match. REJECTED if the admin rejects the match. Only one row for a given and facility list item pair should have either AUTOMATIC or CONFIRMED status', max_length=9)),
                ('is_active', models.BooleanField(default=True, help_text='A facility match is_active if its associated list item not been removed; when a list item is removed, this field will be set to False.')),
                ('version', models.CharField(blank=True, help_text='The version of Dedupe Hub instance that used.', max_length=200, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name_plural': 'facility matches temp',
            },
        ),
        migrations.AddIndex(
            model_name='facilitylistitemtemp',
            index=models.Index(fields=['source', 'row_index'], name='api_flit_facility_list_row_idx'),
        ),
        migrations.AddIndex(
            model_name='facilitylistitemtemp',
            index=models.Index(fields=['country_code', 'clean_name', 'clean_address'], name='api_flit_match_fields_idx'),
        ),
    ]
