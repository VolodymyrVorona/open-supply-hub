# Generated by Django 3.2.4 on 2024-01-08 12:48

from django.db import connection
from django.db.migrations import Migration, RunPython
from api.models import User, Contributor, Source
from api.migrations._migration_helper import MigrationHelper
from django.db.models import Func, Count, CharField, F, Value
from django.db.models.functions import Concat, Lower

helper = MigrationHelper(connection)


def disable_duplicates_and_lowercase_all_emails(apps, schema_editor):
    """
    Disable users in the api_user table with duplicate emails where there is
    no data.
    In cases where there is no data in both duplicates, to leave the
    user whose last login date was the most recent.
    """

    duplicate_emails = User.objects.values('email', 'id')\
        .annotate(lower_email=Func('email', function='LOWER',
                                   output_field=CharField()))\
        .values('lower_email')\
        .annotate(
        email_count=Count('lower_email')
    ).filter(email_count__gt=1)

    user_pairs = []

    for email in duplicate_emails:
        users = User.objects.filter(email__iexact=email['lower_email'])
        user_pairs.append(users)

    users_to_deactivate = []

    for user_pair in user_pairs:
        try:
            contributor1 = Contributor.objects.get(admin_id=user_pair[0].id)
        except Contributor.DoesNotExist:
            contributor1 = None
        try:
            contributor2 = Contributor.objects.get(admin_id=user_pair[1].id)
        except Contributor.DoesNotExist:
            contributor2 = None
        try:
            if contributor1 is not None:
                sources1 = Source.objects.filter(
                    contributor_id=contributor1.id)

        except Source.DoesNotExist:
            sources1 = None
        try:
            if contributor2 is not None:
                sources2 = Source.objects.filter(
                    contributor_id=contributor2.id)
        except Source.DoesNotExist:
            sources2 = None

        if not sources1 and not sources2:
            if user_pair[0].last_login < user_pair[1].last_login:
                users_to_deactivate.append(user_pair[0])
            else:
                users_to_deactivate.append(user_pair[1])
        else:
            if not sources1:
                users_to_deactivate.append(user_pair[0])
            else:
                users_to_deactivate.append(user_pair[1])

    for user in users_to_deactivate:
        User.objects.filter(id=user.id).update(
           email=Concat(Value('###DELETED###'), F('email')))
        u = User.objects.get(id=user.id)
        u.is_active = False
        u.save()

    User.objects.update(email=Lower('email'))


class Migration(Migration):

    dependencies = [
        ('api', '0134_remove_sources_without_contributor'),
    ]

    operations = [
        RunPython(disable_duplicates_and_lowercase_all_emails, RunPython.noop)
    ]
